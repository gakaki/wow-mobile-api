<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wow.order.mapper.SaleOrderItemMapper" >
  <resultMap id="BaseResultMap" type="com.wow.order.model.SaleOrderItem" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="sale_order_id" property="saleOrderId" jdbcType="INTEGER" />
    <result column="delivery_order_id" property="deliveryOrderId" jdbcType="INTEGER" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="order_item_amount" property="orderItemAmount" jdbcType="DECIMAL" />
    <result column="order_item_price" property="orderItemPrice" jdbcType="DECIMAL" />
    <result column="order_item_qty" property="orderItemQty" jdbcType="TINYINT" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="need_assemble" property="needAssemble" jdbcType="BIT" />
    <result column="frozen_warehouse_stock_total_qty" property="frozenWarehouseStockTotalQty" jdbcType="INTEGER" />
    <result column="frozen_virtual_stock_qty" property="frozenVirtualStockQty" jdbcType="INTEGER" />
    <result column="is_virtual_stock_ready" property="isVirtualStockReady" jdbcType="BIT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="is_shipped_out" property="isShippedOut" jdbcType="BIT" />
    <result column="is_deleted" property="isDeleted" jdbcType="BIT" />
  </resultMap>
  
    <resultMap id="WareHouseResultMap"   type="com.wow.order.vo.OrderItemStockVo" >
	    <id column="saleOrderItemId"   property="saleOrderItemId"/>
	     <result column="productId"  property="productId" />
	     <result column="virtualProductQty"  property="virtualProductQty" />
	    <collection property="orderItemProductStockVos"  ofType="com.wow.order.vo.OrderItemProductStockVo">
	        <result column="warehouseId"  property="warehouseId"/>
	        <result column="productQty"  property="productQty"/>
    </collection>
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, sale_order_id, delivery_order_id, product_id, order_item_amount, order_item_price, 
    order_item_qty, product_name, need_assemble, frozen_warehouse_stock_total_qty, frozen_virtual_stock_qty, 
    is_virtual_stock_ready, create_time, update_time, is_shipped_out, is_deleted
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.wow.order.model.SaleOrderItemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sale_order_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sale_order_item
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sale_order_item
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.wow.order.model.SaleOrderItemExample" >
    delete from sale_order_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wow.order.model.SaleOrderItem" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sale_order_item (sale_order_id, delivery_order_id, product_id, 
      order_item_amount, order_item_price, order_item_qty, 
      product_name, need_assemble, frozen_warehouse_stock_total_qty, 
      frozen_virtual_stock_qty, is_virtual_stock_ready, 
      create_time, update_time, is_shipped_out, 
      is_deleted)
    values (#{saleOrderId,jdbcType=INTEGER}, #{deliveryOrderId,jdbcType=INTEGER}, #{productId,jdbcType=INTEGER}, 
      #{orderItemAmount,jdbcType=DECIMAL}, #{orderItemPrice,jdbcType=DECIMAL}, #{orderItemQty,jdbcType=TINYINT}, 
      #{productName,jdbcType=VARCHAR}, #{needAssemble,jdbcType=BIT}, #{frozenWarehouseStockTotalQty,jdbcType=INTEGER}, 
      #{frozenVirtualStockQty,jdbcType=INTEGER}, #{isVirtualStockReady,jdbcType=BIT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{isShippedOut,jdbcType=BIT}, 
      #{isDeleted,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.wow.order.model.SaleOrderItem" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sale_order_item
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="saleOrderId != null" >
        sale_order_id,
      </if>
      <if test="deliveryOrderId != null" >
        delivery_order_id,
      </if>
      <if test="productId != null" >
        product_id,
      </if>
      <if test="orderItemAmount != null" >
        order_item_amount,
      </if>
      <if test="orderItemPrice != null" >
        order_item_price,
      </if>
      <if test="orderItemQty != null" >
        order_item_qty,
      </if>
      <if test="productName != null" >
        product_name,
      </if>
      <if test="needAssemble != null" >
        need_assemble,
      </if>
      <if test="frozenWarehouseStockTotalQty != null" >
        frozen_warehouse_stock_total_qty,
      </if>
      <if test="frozenVirtualStockQty != null" >
        frozen_virtual_stock_qty,
      </if>
      <if test="isVirtualStockReady != null" >
        is_virtual_stock_ready,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="isShippedOut != null" >
        is_shipped_out,
      </if>
      <if test="isDeleted != null" >
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="saleOrderId != null" >
        #{saleOrderId,jdbcType=INTEGER},
      </if>
      <if test="deliveryOrderId != null" >
        #{deliveryOrderId,jdbcType=INTEGER},
      </if>
      <if test="productId != null" >
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="orderItemAmount != null" >
        #{orderItemAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderItemPrice != null" >
        #{orderItemPrice,jdbcType=DECIMAL},
      </if>
      <if test="orderItemQty != null" >
        #{orderItemQty,jdbcType=TINYINT},
      </if>
      <if test="productName != null" >
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="needAssemble != null" >
        #{needAssemble,jdbcType=BIT},
      </if>
      <if test="frozenWarehouseStockTotalQty != null" >
        #{frozenWarehouseStockTotalQty,jdbcType=INTEGER},
      </if>
      <if test="frozenVirtualStockQty != null" >
        #{frozenVirtualStockQty,jdbcType=INTEGER},
      </if>
      <if test="isVirtualStockReady != null" >
        #{isVirtualStockReady,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isShippedOut != null" >
        #{isShippedOut,jdbcType=BIT},
      </if>
      <if test="isDeleted != null" >
        #{isDeleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wow.order.model.SaleOrderItemExample" resultType="java.lang.Integer" >
    select count(*) from sale_order_item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sale_order_item
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.saleOrderId != null" >
        sale_order_id = #{record.saleOrderId,jdbcType=INTEGER},
      </if>
      <if test="record.deliveryOrderId != null" >
        delivery_order_id = #{record.deliveryOrderId,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null" >
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.orderItemAmount != null" >
        order_item_amount = #{record.orderItemAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderItemPrice != null" >
        order_item_price = #{record.orderItemPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.orderItemQty != null" >
        order_item_qty = #{record.orderItemQty,jdbcType=TINYINT},
      </if>
      <if test="record.productName != null" >
        product_name = #{record.productName,jdbcType=VARCHAR},
      </if>
      <if test="record.needAssemble != null" >
        need_assemble = #{record.needAssemble,jdbcType=BIT},
      </if>
      <if test="record.frozenWarehouseStockTotalQty != null" >
        frozen_warehouse_stock_total_qty = #{record.frozenWarehouseStockTotalQty,jdbcType=INTEGER},
      </if>
      <if test="record.frozenVirtualStockQty != null" >
        frozen_virtual_stock_qty = #{record.frozenVirtualStockQty,jdbcType=INTEGER},
      </if>
      <if test="record.isVirtualStockReady != null" >
        is_virtual_stock_ready = #{record.isVirtualStockReady,jdbcType=BIT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isShippedOut != null" >
        is_shipped_out = #{record.isShippedOut,jdbcType=BIT},
      </if>
      <if test="record.isDeleted != null" >
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sale_order_item
    set id = #{record.id,jdbcType=INTEGER},
      sale_order_id = #{record.saleOrderId,jdbcType=INTEGER},
      delivery_order_id = #{record.deliveryOrderId,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      order_item_amount = #{record.orderItemAmount,jdbcType=DECIMAL},
      order_item_price = #{record.orderItemPrice,jdbcType=DECIMAL},
      order_item_qty = #{record.orderItemQty,jdbcType=TINYINT},
      product_name = #{record.productName,jdbcType=VARCHAR},
      need_assemble = #{record.needAssemble,jdbcType=BIT},
      frozen_warehouse_stock_total_qty = #{record.frozenWarehouseStockTotalQty,jdbcType=INTEGER},
      frozen_virtual_stock_qty = #{record.frozenVirtualStockQty,jdbcType=INTEGER},
      is_virtual_stock_ready = #{record.isVirtualStockReady,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_shipped_out = #{record.isShippedOut,jdbcType=BIT},
      is_deleted = #{record.isDeleted,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.wow.order.model.SaleOrderItem" >
    update sale_order_item
    <set >
      <if test="saleOrderId != null" >
        sale_order_id = #{saleOrderId,jdbcType=INTEGER},
      </if>
      <if test="deliveryOrderId != null" >
        delivery_order_id = #{deliveryOrderId,jdbcType=INTEGER},
      </if>
      <if test="productId != null" >
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="orderItemAmount != null" >
        order_item_amount = #{orderItemAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderItemPrice != null" >
        order_item_price = #{orderItemPrice,jdbcType=DECIMAL},
      </if>
      <if test="orderItemQty != null" >
        order_item_qty = #{orderItemQty,jdbcType=TINYINT},
      </if>
      <if test="productName != null" >
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="needAssemble != null" >
        need_assemble = #{needAssemble,jdbcType=BIT},
      </if>
      <if test="frozenWarehouseStockTotalQty != null" >
        frozen_warehouse_stock_total_qty = #{frozenWarehouseStockTotalQty,jdbcType=INTEGER},
      </if>
      <if test="frozenVirtualStockQty != null" >
        frozen_virtual_stock_qty = #{frozenVirtualStockQty,jdbcType=INTEGER},
      </if>
      <if test="isVirtualStockReady != null" >
        is_virtual_stock_ready = #{isVirtualStockReady,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isShippedOut != null" >
        is_shipped_out = #{isShippedOut,jdbcType=BIT},
      </if>
      <if test="isDeleted != null" >
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wow.order.model.SaleOrderItem" >
    update sale_order_item
    set sale_order_id = #{saleOrderId,jdbcType=INTEGER},
      delivery_order_id = #{deliveryOrderId,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      order_item_amount = #{orderItemAmount,jdbcType=DECIMAL},
      order_item_price = #{orderItemPrice,jdbcType=DECIMAL},
      order_item_qty = #{orderItemQty,jdbcType=TINYINT},
      product_name = #{productName,jdbcType=VARCHAR},
      need_assemble = #{needAssemble,jdbcType=BIT},
      frozen_warehouse_stock_total_qty = #{frozenWarehouseStockTotalQty,jdbcType=INTEGER},
      frozen_virtual_stock_qty = #{frozenVirtualStockQty,jdbcType=INTEGER},
      is_virtual_stock_ready = #{isVirtualStockReady,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_shipped_out = #{isShippedOut,jdbcType=BIT},
      is_deleted = #{isDeleted,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
   <!-- 根据订单id获取订单项目中产品规格图片 -->
    <select id="selectSpecImgByOrderIds"  parameterType="List"  resultType="com.wow.order.vo.OrderItemImgVo" >
         SELECT 
			  o.sale_order_id saleOrderId,
			  p.product_color_img specImg
			FROM
			  sale_order_item o 
			  INNER JOIN product p 
			    ON o.product_id = p.id 
			WHERE o.sale_order_id in
		  <foreach collection="collection"   item="item"  open="(" close=")"  separator="," >
                   #{item}
         </foreach>
  </select>
  
    <!-- 查询订单id查询产品明细 -->
  <select id="selectByOrderId"   resultType="com.wow.order.vo.OrderItemVo"  parameterType="Integer" >
	       SELECT 
				  so.product_id productId,
				  so.product_name productName,
				  so.delivery_order_id deliveryOrderId,
				  so.order_item_price sellPrice,
				  so.order_item_qty productQty,
				  so.order_item_amount sellTotalAmount,
				  so.is_shipped_out isShippedOut,
				  p.product_color_img specImg,
				  p.color_display_name color,
				  p.product_color_img spec
			FROM
			  sale_order_item so 
			  INNER JOIN product p 
			    ON so.product_id = p.id 
			WHERE so.is_deleted = FALSE 
			  AND so.sale_order_id =#{orderId}
  </select>
  
   <!-- 根据订单id获取订单项目使用库存明细 -->
  <select id="selectWareHouseStockByOrderId"   resultMap="WareHouseResultMap"  parameterType="Integer" >
	     SELECT 
			  so.id saleOrderItemId,
			  so.product_id productId,
			  so.frozen_virtual_stock_qty virtualProductQty ,
			  sow.warehouse_id warehouseId,
			  sow.frozen_warehouse_stock_qty productQty
		  FROM
			  sale_order_item so 
			  INNER JOIN sale_order_item_warehouse sow 
			  ON so.id = sow.sale_order_item_id 
			WHERE so.sale_order_id =#{orderId} 
  </select>
  
  <!-- 根据订单项id列表更新订单项发货状态 -->
  <update id="updateDeliveryByIds"   parameterType="com.wow.order.vo.OrderItemQuery" >
          update sale_order_item 
          set  is_shipped_out =true,
          delivery_order_id=#{deliveryOrderId}
    where id in
       <foreach collection="orderItemIds"   item="item"  open="(" close=")"  separator="," >
                   #{item}
         </foreach>
  </update>
  
</mapper>